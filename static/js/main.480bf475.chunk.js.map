{"version":3,"sources":["context/settings.js","components/header/header.js","hooks/form.js","components/form/form.js","components/list/list.js","components/settingsForm/settingsForm.js","components/todo/todo.js","App.js","index.js"],"names":["settingsContext","React","createContext","Settings","props","useState","displayCompleted","pageLimit","stateSettings","setStateSetting","submitFlag","setSubmitFlag","useEffect","JSON","parse","localStorage","getItem","console","log","state","Provider","value","children","header","incomplete","useForm","callback","values","setValues","handleChange","event","persist","target","name","handleSubmit","preventDefault","Form","addItem","item","id","uuid","complete","difficulty","onSubmit","class","onChange","type","placeholder","defaultValue","min","max","List","toggleComplete","interactive","elevation","Elevation","TWO","text","assignee","onClick","toString","SettingsForm","handleCloseDrawer","settings","useContext","tempFlag","setTempFlag","e","pageSettings","setItem","stringify","checked","label","ToDo","list","setList","setIncomplete","completedList","setCompletedList","pages","setPages","currentPage","setCurrentPage","pageElements","setPageElements","isOpen","setIsOpen","map","completedItems","filter","updatedList","incompleteCount","length","document","title","numberOfPages","Math","ceil","pagesArray","Array","from","v","k","chunks","array","chunkSize","res","i","chunk","slice","push","pageNumber","style","cursor","handleChangePage","icon","left","onClose","size","usePortal","hasBackdrop","canOutsideClickClose","className","Classes","DRAWER_BODY","DIALOG_BODY","App","Main","Component","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.480bf475.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport const settingsContext = React.createContext();\n\nexport default function Settings(props) {\n\n    const [stateSettings, setStateSetting] = useState({\n        displayCompleted: false,\n        pageLimit: 4\n    });\n    const[submitFlag, setSubmitFlag] = useState(false);\n\n    useEffect(() => {\n        setStateSetting(JSON.parse(localStorage.getItem('pageSettingsContext')) || stateSettings);\n        console.log(stateSettings);\n    },[submitFlag]);\n\n    const state = {\n        displayCompleted: stateSettings.displayCompleted,\n        pageLimit: stateSettings.pageLimit,\n        submitFlag,\n        setSubmitFlag\n    }\n\n    return (\n        <settingsContext.Provider value={state}>\n            {props.children}\n        </settingsContext.Provider>\n    )\n}\n","import React from 'react';\nimport './header.scss'\n\nfunction header(props) {\n    const { incomplete } = props;\n    return (\n        <header>\n            <h1>ToDo List Manager</h1>\n            <h2>{incomplete} items pending</h2>\n        </header>\n    )\n}\n\nexport default header;\n","import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n  };\n  \n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n\n\n","import React from 'react';\nimport useForm from '../../hooks/form';\nimport { v4 as uuid } from 'uuid';\nimport { Button } from \"@blueprintjs/core\";\nimport './form.scss';\n\nexport default function Form(props) {\n    const { addItem } = props;\n    const { handleChange, handleSubmit } = useForm(submitNewItem);\n\n    function submitNewItem(item) {\n        item.id = uuid();\n        item.complete = false;\n        if (!item.difficulty) item.difficulty = 3;\n        addItem(item);\n    }\n\n    return (\n\n        <form id='newForm' onSubmit={handleSubmit}>\n\n            <h2 data-testid='formHeader'>Add a New ToDo</h2>\n\n            <label class=\"bp3-label\">\n                <span>Title</span>\n                <input class=\"bp3-input\" onChange={handleChange} name=\"text\" type=\"text\" placeholder=\"Item Details\" />\n            </label>\n\n            <label class=\"bp3-label\">\n                <span>Assigned To</span>\n                <input class=\"bp3-input\" onChange={handleChange} name=\"assignee\" type=\"text\" placeholder=\"Assignee Name\" />\n            </label>\n\n            <label class=\"bp3-label\">\n                <span>Difficulty</span>&nbsp;\n                <input onChange={handleChange} defaultValue={3} type=\"range\" min={1} max={5} name=\"difficulty\" />\n            </label>\n\n            <label>\n                <Button class=\"bp3-button\" type=\"submit\">Add Item</Button>\n            </label>\n        </form >\n    )\n}","import React from 'react';\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\nimport './list.scss';\n\nexport default function List(props) {\n    const { item, toggleComplete } = props;\n    return (\n        <>\n            <Card interactive={true} elevation={Elevation.TWO}>\n                <h4>{item.text}</h4>\n                <p>Assigned to: {item.assignee}</p>\n                <p>Difficulty: {item.difficulty}</p>\n                Completed: <Button class=\"bp3-button\" onClick={() => toggleComplete(item.id)}>{item.complete.toString()}</Button>\n            </Card>\n            {/* <hr /> */}\n            <br/>\n        </>\n    )\n}\n\n","import React, { useEffect, useContext, useState } from 'react';\nimport { settingsContext } from '../../context/settings.js';\nimport { Button, Switch } from \"@blueprintjs/core\";\n\nexport default function SettingsForm(props) {\n    let { handleCloseDrawer } = props;\n    const settings = useContext(settingsContext);\n    const [tempFlag, setTempFlag] = useState(settings.displayCompleted);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let pageSettings = {\n            displayCompleted: tempFlag,\n            pageLimit: e.target.pageLimit.value || settings.pageLimit\n        };\n        localStorage.setItem('pageSettingsContext', JSON.stringify(pageSettings));\n        settings.setSubmitFlag(!settings.submitFlag);\n        handleCloseDrawer();\n    }\n\n    const toggleSwitch = () => {\n        setTempFlag(tempFlag === true ? false : true);\n    }\n\n    return (\n\n        <form onSubmit={handleSubmit}>\n            <h2 data-testid='formHeader'>Page Settings</h2><hr/><br/>\n\n            <Switch checked={tempFlag === true} label=\"Display Completed\" onChange={toggleSwitch} /><br/>\n            <label class=\"bp3-label\">\n                <span>Items Per Page</span>\n                <input class=\"bp3-input\" name=\"pageLimit\" type=\"number\" /><br/>\n                <p><strong>Current Items Per Page: {settings.pageLimit}</strong></p>\n            </label><br/>\n            <label>\n                <Button class=\"bp3-button\" type=\"submit\">Save Changes</Button>\n            </label>\n        </form >\n    )\n}","import React, { useEffect, useState, useContext } from 'react';\nimport { settingsContext } from '../../context/settings.js';\nimport './todo.scss';\nimport Header from '../header/header';\nimport Form from '../form/form';\nimport List from '../list/list';\nimport SettingsForm from '../settingsForm/settingsForm';\nimport { Button, Classes, Drawer } from \"@blueprintjs/core\";\n\nconst ToDo = () => {\n\n    const settings = useContext(settingsContext);\n    const [list, setList] = useState([]);\n    const [incomplete, setIncomplete] = useState([]);\n    const [completedList, setCompletedList] = useState([]);\n    const [pages, setPages] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [pageElements, setPageElements] = useState([]);\n    const [isOpen, setIsOpen] = useState(false);\n    function addItem(item) {\n        setList([item, ...list]);\n    }\n\n    function deleteItem(id) {\n        const items = list.filter(item => item.id !== id);\n        setList(items);\n    }\n\n    function toggleComplete(id) {\n        list.map(item => {\n            if (item.id === id) {\n                item.complete = !item.complete;\n            }\n            return item;\n        });\n        const completedItems = list.filter(item => item.complete);\n        setCompletedList([...completedItems, ...completedList]);\n        const updatedList = list.filter(item => !item.complete);\n        setList(updatedList);\n    }\n\n    function chunk(array, chunkSize) {\n        const res = [];\n        for (let i = 0; i < array.length; i += chunkSize) {\n            const chunk = array.slice(i, i + chunkSize);\n            res.push(chunk);\n        }\n        return res;\n    }\n\n    function handleChangePage(pageNumber) {\n        setCurrentPage(pageNumber);\n    }\n\n    let handleCloseDrawer = () => {\n        setIsOpen(false);\n    }\n\n\n    useEffect(() => {\n        let incompleteCount = list.length;\n        setIncomplete(incompleteCount);\n        document.title = `To Do List: ${incomplete}`;\n        let numberOfPages = Math.ceil(list.length / settings.pageLimit);\n        let pagesArray = Array.from({ length: numberOfPages }, (v, k) => k + 1);\n        setPages(pagesArray);\n        let chunks = chunk(list, settings.pageLimit);\n        setPageElements(chunks[currentPage - 1]);\n    }, [list, currentPage]);\n\n    return (\n        <>\n            <Header incomplete={incomplete} />\n            <Form addItem={addItem} />\n            <dev>\n                <dev id='pageNumbers'>\n                    <p>Pages &nbsp;</p>{pages.map(pageNumber => (\n                        <p style={{ cursor: 'pointer' }} onClick={() => handleChangePage(pageNumber)}>{pageNumber}  &nbsp;</p>\n                    ))}</dev>\n                <Button id='pageSettingsButton' icon=\"cog\" onClick={() => setIsOpen(true)}></Button>\n            </dev>\n            {pageElements?.map(item => (\n                <List key={item.id} item={item} toggleComplete={toggleComplete} />\n            ))}\n\n            {settings.displayCompleted && <div>\n                <h3>Completed list:</h3>\n                {completedList.map(item => (\n                    <List key={item.id} item={item} toggleComplete={toggleComplete} />\n                ))}\n            </div>}\n\n            <Drawer style={{ left: '30' }}\n                isOpen={isOpen}\n                onClose={handleCloseDrawer}\n                size={'300px'}\n                usePortal={true}\n                hasBackdrop={true}\n                canOutsideClickClose={true}\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <div className={Classes.DIALOG_BODY}>\n                        <SettingsForm handleCloseDrawer={handleCloseDrawer} />\n                    </div>\n                </div>\n            </Drawer>\n        </>\n    );\n};\n\nexport default ToDo;","import React from 'react';\nimport Settings from './context/settings';\nimport ToDo from './components/todo/todo';\nimport './App.scss';\n\nexport default function App(){\n  return(\n    <Settings>\n      <ToDo/>\n    </Settings>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App.js';\n\nimport 'normalize.css/normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);"],"sourceRoot":""}